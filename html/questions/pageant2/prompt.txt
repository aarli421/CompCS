Cow Beauty Pageant II<br>=====================<br><br>This problem is the same as 'Cow Beauty Pageant' problem but this time<br>you need to implement it with Breadth First Search.<br><br>Hearing that the latest fashion trend was cows with two spots on their<br>hides, Farmer John has purchased an entire herd of two-spot cows. <br>Unfortunately, fashion trends tend to change quickly, and the most popular<br>current fashion is cows with only one spot!  <br><br>FJ wants to make his herd more fashionable by painting each of his cows in<br>such a way that merges their two spots into one.  The hide of a cow is<br>represented by an N by M (1 &lt;= N,M &lt;= 50) grid of characters like this:<br><br>................<br>..XXXX....XXX...<br>...XXXX....XX...<br>.XXXX......XXX..<br>........XXXXX...<br>.........XXX....<br><br>Here, each 'X' denotes part of a spot.  Two 'X's belong to the same spot if<br>they are vertically or horizontally adjacent (diagonally adjacent does not<br>count), so the figure above has exactly two spots.  All of the cows in FJ's<br>herd have exactly two spots.<br><br>FJ wants to use as little paint as possible to merge the two spots into<br>one.  In the example above, he can do this by painting only three<br>additional characters with 'X's (the new characters are marked with '*'s<br>below to make them easier to see).<br><br>................<br>..XXXX....XXX...<br>...XXXX*...XX...<br>.XXXX..**..XXX..<br>........XXXXX...<br>.........XXX....<br><br>Please help FJ determine the minimum number of new 'X's he must paint in<br>order to merge two spots into one large spot.<br><br>In this problem, you won't submit the entire code. Instead, you can<br>assume that the grading system has the code skeleton below and you<br>just need to fill inside the solve() function:<br><br>C++:                           Java:<br>-------------------------      ------------------<br>#include &lt;iostream&gt;            import java.util.*;<br>#include &lt;queue&gt;<br>			       public class pageant2<br>using namespace std;           {<br>                                   private static void solve()<br>void solve()                       {<br>{				       // JUST WRITE THIS CODE<br>    // JUST WRITE THIS CODE        }<br>}<br>                                   public static void main(String[] args)<br>int main()                         {<br>{                                      solve();<br>    solve();                       }<br>}			       }<br>-------------------------------------------------------------------------<br><br>PROBLEM NAME: pageant2<br><br>INPUT FORMAT:<br><br>* Line 1: Two space-separated integers, N and M.<br><br>* Lines 2..1+N: Each line contains a length-M string of 'X's and '.'s<br>        specifying one row of the cow hide pattern.<br><br>SAMPLE INPUT:<br><br>6 16<br>................<br>..XXXX....XXX...<br>...XXXX....XX...<br>.XXXX......XXX..<br>........XXXXX...<br>.........XXX....<br><br>INPUT DETAILS:<br><br>The pattern in the input shows a cow hide with two distinct spots, labeled<br>1 and 2 below:<br><br>................<br>..1111....222...<br>...1111....22...<br>.1111......222..<br>........22222...<br>.........222....<br><br>OUTPUT FORMAT:<br><br>* Line 1: The minimum number of new 'X's that must be added to the<br>        input pattern in order to obtain one single spot.<br><br>SAMPLE OUTPUT:<br><br>3<br><br>OUTPUT DETAILS:<br>Three 'X's suffice to join the two spots into one:<br><br>................<br>..1111....222...<br>...1111X...22...<br>.1111..XX..222..<br>........22222...<br>.........222....
